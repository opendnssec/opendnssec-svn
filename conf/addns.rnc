# $Id: addns.rnc 1920 2009-09-30 07:49:39Z matthijs $
#
# Copyright (c) 2011 NLnet Labs
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start = element Adapter {
	# Type of adapter
	attribute type { xsd:string },

	# inbound zone transfer settings
	element Inbound {
		# what TSIG credentials to use (zero or more)
		tsig*,
		element RequestTransfer { remoteAddress }*,
		element AllowNotify { remoteAddress }*
	},

	# outbound zone transfer settings
	element Outbound {
		# what TSIG credentials to use (zero or more)
		tsig*,
		element ProvideTransfer { remoteAddress }*,
		element Notify { remoteAddress }*
	}
}

# TSIG secret
tsig =
	element TSIG {
		element Name { xsd:string },
		# http://www.iana.org/assignments/tsig-algorithm-names
		element Algorithm { xsd:string },
		# base64 encoded secret
		element Secret { xsd:base64Binary }
	}

ipv4 = element IPv4 { xsd:string }
ipv6 = element IPv6 { xsd:string }
port = element Port { xsd:positiveInteger { maxInclusive = "65535" } }
key = element Key { xsd:string }

remoteAddress = (ipv4 | ipv6), port?, key?
