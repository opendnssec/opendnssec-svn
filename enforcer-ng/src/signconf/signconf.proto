/*
 * $Id$
 *
 * Copyright (c) 2011 Surfnet 
 * Copyright (c) 2011 .SE (The Internet Infrastructure Foundation).
 * Copyright (c) 2011 OpenDNSSEC AB (svb)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// signconf.rnc converted to .proto format for protocol buffers

package ods.signconf;

import "xmlext.proto";

message SignerConfigurationDocument {
	required SignerConfiguration signerconfiguration = 1 [(xml).path="SignerConfiguration"]; // root element in a signconf file
}

message SignerConfiguration {
	required Zone zone = 1 [(xml).path="Zone"];
}

message Zone{
	required string name = 1 [(xml).path="@name"];
	required Signatures signatures = 2 [(xml).path="Signatures" ];
	required Denial denial = 3 [(xml).path="Denial" ];
	required Keys keys = 4  [(xml).path="Keys" ];
	required int32 ttl = 5 [(xml).path="SOA/TTL", (xml).type=duration]; // ttl of the soa
	required int32 min = 6 [(xml).path="SOA/Minimum", (xml).type=duration]; // min of the soa
	required serial serial = 7 [(xml).path="SOA/Serial"]; // kind of serial used 
	optional bool audit = 8 [(xml).path="Audit"];
}

message Signatures {
	required int32 resign = 1 [(xml).path="Resign", (xml).type=duration]; // re-signing interval
	required int32 refresh = 2 [(xml).path="Refresh",(xml).type=duration]; // how old a signature may become before it needs to be re-signed
	required int32 valdefault = 3 [(xml).path="Validity/Default",(xml).type=duration]; // signature validity period
	required int32 valdenial = 4 [(xml).path="Validity/Denial",(xml).type=duration]; // nsec(3) validity period
	required int32 jitter = 5 [(xml).path="Jitter",(xml).type=duration]; // jitter to use in signature inception and expiration times
	required int32 inceptionOffset = 6 [(xml).path="InceptionOffset",(xml).type=duration];
	optional int32 max_zone_ttl = 7 [default = 0, (xml).path="MaxZoneTTL",(xml).type=duration];  // Maximum TTL for RRSIG that may be used in a zone. Signer should use it as a cap.
}

message Denial {
    //--NOTE that denial contains either nsec or nsec3 not both.
    optional NSEC nsec = 1 [(xml).path="NSEC"]; // nsec version 0
    optional NSEC3 nsec3 = 2 [(xml).path="NSEC3"]; // nsec version 3
}

message NSEC {
}

message NSEC3 {
    optional bool optout = 1 [(xml).path="OptOut"]; // opt out flag for nsec3
    required int32 algorithm = 2 [(xml).path="Hash/Algorithm"]; // nsec3 algorithm [0..255]
    required int32 iterations = 3 [(xml).path="Hash/Iterations"]; //nsec3 iterations [1..65535]
    required string salt = 4 [(xml).path="Hash/Salt"];// nsec3 salt generated by the enforcer e.g. 0438eb9a93a6d6c5
}

message Keys {
	required int32 ttl = 1 [(xml).path="TTL", (xml).type=duration];
	repeated Key keys = 2 [(xml).path="Key"]; // 1 or more keys
}

message Key {
    required uint32 flags = 1 [(xml).path="Flags"]; // DNSKEY flags [0..65535]
    required uint32 algorithm = 2 [(xml).path="Algorithm"]; // DNSKEY algorithm [0..255]
    required string locator = 3 [(xml).path="Locator"]; // The key locator is matched against the PKCS#11 CKA_ID and
                                                        // is specified as a string of hex characters.
                                                        // xsd:hexBinary e.g. bea77e4fb7d276c8fc885443ce2830aa
	optional bool ksk = 4 [(xml).path="KSK"]; // sign all the DNSKEY RRsets with this key ?
	optional bool zsk = 5  [(xml).path="ZSK"]; // sign all non-DNSKEY RRsets with this key ?
    optional bool publish = 6 [(xml).path="Publish"]; // include this key in the zonefile ?
    optional bool deactivate = 7 [(xml).path="Deactivate"]; // deactivate this key (i.e. do not recycle any signatures)
    optional CDS cds = 8 [(xml).path="CDS"]; // create CDS RR for this key ?
}

message CDS {
    repeated Digest digest = 1 [(xml).path="Digest"]; // Digest algorithm [0..255]
}

message Digest {
    required uint32 digest_type = 1 [(xml).path="Type"]; // Digest algorithm [0..255]
}

enum serial {
    counter = 1; // use an increasing counter (but use the serial from the unsigned zone if possible)
    datecounter = 2; // use increasing counter in YYYYMMDDxx format (xx is incremented within each day)
    unixtime = 3; // the serial number is set to the "Unix time" (seconds since 00:00 on 1 January 1970 (UTC)) at which the signer is run.
    keep = 4; // keep the serial from the unsigned zone (do not resign unless it has been incremented)
}
